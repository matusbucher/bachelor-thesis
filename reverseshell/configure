#!/bin/bash

should_update=false

for arg in "$@"; do
    case $arg in
        HOST=*)   HOST_ADDR="${arg#*=}"; should_update=true ;;
        PORT=*)   PORT_NUM="${arg#*=}"; should_update=true ;;
        SHELL=*)  SHELL_PATH="${arg#*=}"; should_update=true ;;
        PORT2=*)  PORT2_NUM="${arg#*=}"; should_update=true ;;
        TMP=*)    TMP_PATH="${arg#*=}"; should_update=true ;;
        *) echo "Unknown parameter: $arg" >&2; exit 1 ;;
    esac
done

if [ "$should_update" = false ]; then
    echo "No parameters provided. Nothing to update."
    echo "Usage: ./configure HOST=... PORT=... SHELL=... PORT2=... TMP=..."
    exit 0
fi

# Helper to get current value from Makefile
get_value() {
    awk -F':=' -v key="$1" '$1 ~ "^[[:space:]]*"key"[[:space:]]*$" {gsub(/^[ \t]+|[ \t]+$/, "", $2); print $2}' Makefile
}

# Fall back to current Makefile values if not passed
HOST_ADDR=${HOST_ADDR:-$(get_value HOST)}
PORT_NUM=${PORT_NUM:-$(get_value PORT)}
SHELL_PATH=${SHELL_PATH:-$(get_value RSHELL)}
PORT2_NUM=${PORT2_NUM:-$(get_value PORT2)}
TMP_PATH=${TMP_PATH:-$(get_value TMP)}

# Update the Makefile
awk -v host="$HOST_ADDR" -v port="$PORT_NUM" -v shell="$SHELL_PATH" -v port2="$PORT2_NUM" -v tmp="$TMP_PATH" '
    /^[[:space:]]*HOST[[:space:]]*:=/    { print "HOST\t:= " host; next }
    /^[[:space:]]*PORT[[:space:]]*:=/    { print "PORT\t:= " port; next }
    /^[[:space:]]*RSHELL[[:space:]]*:=/  { print "RSHELL\t:= " shell; next }
    /^[[:space:]]*PORT2[[:space:]]*:=/   { print "PORT2\t:= " port2; next }
    /^[[:space:]]*TMP[[:space:]]*:=/     { print "TMP\t\t:= " tmp; next }
    { print }
' Makefile > Makefile.tmp && mv Makefile.tmp Makefile


echo "Makefile updated with:"
echo "  HOST   = $HOST_ADDR"
echo "  PORT   = $PORT_NUM"
echo "  SHELL  = $SHELL_PATH"
echo "  PORT2  = $PORT2_NUM"
echo "  TMP    = $TMP_PATH"
